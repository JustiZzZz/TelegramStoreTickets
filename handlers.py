# handlers.py
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaAudio, InputMediaDocument
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage # You can define storage here or in run.py

import keyboards as kb
from files.config import ADMIN_ID, MEDIA_MATH, VOICE_MATH, PAYMENT_REQUISITES, FULL_AGREEMENT_LINK

router = Router()

class PaymentStates(StatesGroup):
    waiting_for_payment_proof = State()
    admin_replying = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        text=(
            "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ <u>¬´–ì–∞–π–¥—ã –ø–æ –±–∏–ª–µ—Ç–∞–º¬ª</u></b> üéì\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç ‚Äì –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –≤—Å–µ—Ö —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –ø–æ <b>—É—Å—Ç–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ñ–∏–∑–∏–∫–µ</b> \n\n"
            "<b>–û –Ω–∞—Å:</b>\n"
            "–ù–∞—Å –∑–æ–≤—É—Ç –¢–∞–Ω—è –∏ –ö–∏—Ä–∏–ª–ª. –ú—ã —Å–∞–º–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –Ω–∞ –≤–∞—à–µ–º –º–µ—Å—Ç–µ, —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —ç—Ç–∏ —ç–∫–∑–∞–º–µ–Ω—ã –∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏. "
            "–ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è <b>—É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞</b>, "
            "–æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–µ–∂–∏–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç ‚òùÔ∏è\n\n"
            "<b>–ß—Ç–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ:</b>\n"
            "üîπ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –±–∏–ª–µ—Ç—É\n"
            "üîπ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–±–æ—Ä–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
            "üîπ –£–¥–æ–±–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º –±–∏–ª–µ—Ç–æ–≤\n\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚¨áÔ∏è"
        ),
        reply_markup=kb.main_menu,
        parse_mode="HTML"
    )

@router.callback_query(F.data == 'payment_guide')
async def payment_guide(callback: CallbackQuery):
    await callback.message.answer(
        '–¢–ï–ö–°–¢ –ü–†–ò–ú–ï–†–ê',
        reply_markup=kb.back_menu_close
    )
    await callback.answer()

@router.callback_query(F.data == 'choice_buy')
async def choice_buy(callback: CallbackQuery):
    await callback.message.answer(
        text=(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ:\n\n"
            "<b><u>‚ö°Ô∏è –¢–∞—Ä–∏—Ñ ¬´–ì–∞–π–¥ | –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞¬ª</u></b>\n"
            "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>  –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤—Å–µ—Ö <b>100 –±–∏–ª–µ—Ç–æ–≤</b>\n"
            "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: <u>29 BYN</u></b>\n\n"
            "<i>–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Å–¥–∞—é—â–∏—Ö —É—Å—Ç–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ</i>\n\n"
            "<b><u>üöÄ –¢–∞—Ä–∏—Ñ ¬´–ì–∞–π–¥ | –§–∏–∑–∏–∫–∞¬ª</u></b>\n"
            "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤—Å–µ—Ö 94 –±–∏–ª–µ—Ç–æ–≤\n"
            "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: <u>29 BYN</u></b>\n\n"
            "<i>–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Å–¥–∞—é—â–∏—Ö —É—Å—Ç–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –ø–æ —Ñ–∏–∑–∏–∫–µ</i>\n\n"
            "<b><u>üíé –¢–∞—Ä–∏—Ñ ¬´–ì–∞–π–¥ | –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ + –§–∏–∑–∏–∫–∞¬ª</u></b>\n"
            "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> –≤—Å–µ <b>100 –±–∏–ª–µ—Ç–æ–≤</b> –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ <b>94 –±–∏–ª–µ—Ç–∞</b> –ø–æ —Ñ–∏–∑–∏–∫–µ\n"
            "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: <u>45 BYN</u></b> (–≤—ã–≥–æ–¥–∞ ‚Äì 13 BYN)\n\n"
            "<i>–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫–∞ (–ù–î–¢–ü), –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –¥–≤—É–º –ø—Ä–µ–¥–º–µ—Ç–∞–º</i>\n\n"
            "–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ (–∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª)"
        ),
        reply_markup=kb.user_agreement,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == 'user_agreement')
async def user_agreement(callback: CallbackQuery):
    await callback.message.answer(
        text=(
            "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>\n\n"
            "–í —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–∑–ª–æ–∂–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω.\n\n"
            "–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –Ω–∏–º ‚Äì –≤–∞–∂–Ω—ã–π —à–∞–≥ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π. –°–æ–≤–µ—Ä—à–∞—è –æ–ø–ª–∞—Ç—É, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.\n\n"
            f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: <a href='{FULL_AGREEMENT_LINK}'>–∑–¥–µ—Å—å</a>"
        ),
        reply_markup=kb.user_agreement_next_stage,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == 'product_selection')
async def products(callback: CallbackQuery):
    await callback.message.answer(
        text=(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∞—Ä–∏—Ñ"
        ),
        reply_markup=kb.product_selection,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == 'math_payment')
async def math_payment(callback: CallbackQuery):
    await callback.message.answer(
        text=(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ ¬´–ì–∞–π–¥ | –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞¬ª\n\n"
            "–ö –æ–ø–ª–∞—Ç–µ: <b>29 –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª–µ–π</b>\n"
            "–î–æ—Å—Ç—É–ø: –±–µ—Å—Å—Ä–æ—á–Ω—ã–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É ¬´–ì–∞–π–¥ –ø–æ –±–∏–ª–µ—Ç–∞–º | –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞¬ª\n\n"
            "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>\n\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: {PAYMENT_REQUISITES}\n\n"
            "2Ô∏è‚É£ <b>–í–ê–ñ–ù–û</b> —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫\n\n"
            "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"
        ),
        reply_markup=kb.payment_for_the_product,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == 'short_agreement')
async def short_agreement(callback: CallbackQuery):
    await callback.message.answer(
        text=(
            "–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –≤—ã–∂–∏–º–∫–∞ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤—ã —á–µ—Ç–∫–æ –ø–æ–Ω–∏–º–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –≠—Ç–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
            "<b>–ö—Ä–∞—Ç–∫–æ –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è:</b>\n\n"
            "<b>1. –ß—Ç–æ –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ?</b>\n"
            "–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ –ª–∏—á–Ω—ã–π, –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram-–∫–∞–Ω–∞–ª—É (–∏–ª–∏ –∫–∞–Ω–∞–ª–∞–º) –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –í—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ —Å–∞–º–∏ —Ñ–∞–π–ª—ã, –∞ –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π.\n\n"
            "<b>2. –ß—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ? (–°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!)</b>\n"
            "–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ—Ä—Å–∫–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é. –ü–æ—ç—Ç–æ–º—É <b>—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è</b>:\n"
            "‚Äî –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, —Å–∫–∞–Ω—ã, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n"
            "‚Äî –î–µ–ª–∏—Ç—å—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º —Å –∫–µ–º-–ª–∏–±–æ –µ—â–µ (–¥—Ä—É–∑—å—è–º–∏, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏).\n"
            "‚Äî –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–∞–π–¥—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ.\n"
            "‚Äî –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–º—É-–ª–∏–±–æ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n\n"
            "‚ùóÔ∏è <b>–ù–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –≤–µ–¥–µ—Ç –∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.</b>\n\n"
            "<b>3. –ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?</b>\n"
            "–ü–æ—Å–∫–æ–ª—å–∫—É —É—Å–ª—É–≥–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–∏—Ñ—Ä–æ–≤—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º —Å—Å—ã–ª–∫–∏, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n\n"
            "<b>4. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ª–∏ –≥–∞–π–¥ —Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–∞?</b>\n"
            "–ù–∞—à–∏ –≥–∞–π–¥—ã ‚Äì —ç—Ç–æ –º–æ—â–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –Ω–æ –æ–Ω–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç —É—Å–ø–µ—à–Ω—É—é —Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–∞. –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—à–µ–≥–æ —É—Å–µ—Ä–¥–∏—è –∏ –ª–∏—á–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ú—ã –¥–∞–µ–º —É–¥–æ—á–∫—É ‚Äì –∞ —Ä—ã–±–∞—á–∏—Ç–µ –≤—ã üôÉ\n\n"
            f"–≠—Ç–æ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å: <a href='{FULL_AGREEMENT_LINK}'>–∑–¥–µ—Å—å</a>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∏–º –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏."
        ),
        reply_markup=kb.short_agreement,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == 'example')
async def example(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä',
        reply_markup=kb.example_menu
    )

@router.callback_query(F.data == 'math')
async def math_media(callback: CallbackQuery):
    await callback.message.answer(
        "<b>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ | –ë–∏–ª–µ—Ç ‚Ññ1</b>\n"
        "<b>–¢–µ–º–∞:</b> –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≥–ª–∞. –†–∞–≤–Ω—ã–µ —É–≥–ª—ã. –ë–∏—Å—Å–µ–∫—Ç—Ä–∏—Å–∞ —É–≥–ª–∞. –ì—Ä–∞–¥—É—Å–Ω–∞—è –º–µ—Ä–∞ —É–≥–ª–∞",
        parse_mode="HTML"
    )
    media_group_photo = [InputMediaPhoto(media=file_id) for file_id in MEDIA_MATH]
    await callback.message.answer_media_group(media=media_group_photo)
    media_group_audio = [
        InputMediaAudio(
            media=file_id,
            caption="üéôÔ∏è <i>–ü—Ä–∏–º–µ—Ä –∞—É–¥–∏–æ–±–∏–ª–µ—Ç–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ</i>" if i == 0 else None,
            parse_mode="HTML"
        )
        for i, file_id in enumerate(VOICE_MATH)
    ]
    await callback.message.answer_media_group(media=media_group_audio)
    await callback.message.answer(
        '–£–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å –≤—ã–±–æ—Ä–æ–º?',
        reply_markup=kb.back_menu
    )
    await callback.answer()

@router.callback_query(F.data == 'back_start')
async def back_to_start(callback: CallbackQuery):
    await callback.message.answer(
        '‚Ü©Ô∏è–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥‚Ü©Ô∏è',
        reply_markup=kb.main_menu
    )
    await callback.answer()


@router.callback_query(F.data == 'payment_trigger')
async def start_payment_proof_collection(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å.',
    )
    await state.set_state(PaymentStates.waiting_for_payment_proof)
    await callback.answer()

@router.message(StateFilter(PaymentStates.waiting_for_payment_proof), F.photo)
async def process_payment_photo(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    caption_from_user = message.caption or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'
    caption_for_admin = (
        f"–ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: <code>{user_id}</code>).\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n{caption_from_user}"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_to_user:{user_id}")

    await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=message.photo[-1].file_id,
        caption=caption_for_admin,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.message(StateFilter(PaymentStates.waiting_for_payment_proof), F.text)
async def process_payment_text(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    text_content = message.text

    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_to_user:{user_id}")

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"–ù–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: <code>{user_id}</code>) –ø–æ –ø–æ–≤–æ–¥—É –æ–ø–ª–∞—Ç—ã:\n\n"
            f"<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n{text_content}"
        ),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.message(StateFilter(PaymentStates.waiting_for_payment_proof), F.voice)
async def process_payment_voice(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_to_user:{user_id}")

    await bot.send_voice(
        chat_id=ADMIN_ID,
        voice=message.voice.file_id,
        caption=(
            f"–ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: <code>{user_id}</code>) –ø–æ –ø–æ–≤–æ–¥—É –æ–ø–ª–∞—Ç—ã."
        ),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.message(StateFilter(PaymentStates.waiting_for_payment_proof), F.document)
async def process_payment_document(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    caption_from_user = message.caption or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'
    caption_for_admin = (
        f"–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: <code>{user_id}</code>).\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n{caption_from_user}"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_to_user:{user_id}")

    await bot.send_document(
        chat_id=ADMIN_ID,
        document=message.document.file_id,
        caption=caption_for_admin,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.clear()

@router.message(StateFilter(PaymentStates.waiting_for_payment_proof))
async def process_unsupported_payment_proof(message: Message, state: FSMContext):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.")

@router.callback_query(F.data.startswith('reply_to_user:'))
async def start_admin_reply(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é.", show_alert=True)
        return

    target_user_id = int(callback.data.split(':')[1])
    await state.update_data(target_user_id=target_user_id)
    await state.set_state(PaymentStates.admin_replying)
    await callback.message.answer(f"–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: <code>{target_user_id}</code>. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", parse_mode="HTML")
    await callback.answer()

@router.message(StateFilter(PaymentStates.admin_replying), F.text)
async def send_admin_reply(message: Message, state: FSMContext, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é.")
        await state.clear()
        return

    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    admin_message = message.text

    if target_user_id:
        try:
            await bot.send_message(
                chat_id=target_user_id,
                text=f"‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{admin_message}",
                parse_mode="HTML"
            )
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{target_user_id}</code>.")
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{target_user_id}</code>. –û—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

    await state.clear()

@router.message(StateFilter(PaymentStates.admin_replying), F.photo | F.voice | F.document | F.sticker)
async def handle_admin_non_text_reply(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_ID:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é.")
        await state.clear()
        return
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
